<script>
    window.elasticInstaces = window.elasticInstaces || [];
    (function () {
        let objState = {
            keywords: '<?= $this->keywords ?>',
            initial: true,
            timeout: null,
            categories: [],
            loading: false,
            hasResults: false,
            resultsOnly: false,
            autoCompleteJS: null,
            loadMoreButton: true,
            lastSort: '',
            timer: null,
            time: 0,
            showOpenAiText: false,
            openAi: <?= $this->openAi ? 'true' : 'false' ?>,
            views: {
                results: [],
                didYouMean: [],
                categories: [],
                globalRichSnippets: {}
            },
            options: {
                categories: <?= \json_encode($this->categoryOptions, null, 512) ?>
            },
            richSnippets: {
                faq: {}
            },
            urls: []
        };
        let elasticComponent = new Vue({
            el: "#<?= $this->elementId ?>",
            data: function () {
                return objState
            },
            methods: {
                fetch: function (params) {

                    if (this.keywords.length && this.keywords.length < <?= ($this->minKeywordLength ?: '0') ?>) {
                        return;
                    }

                    this.loading = true;
                    this.initial = false;

                    if (!this.keywords) {
                        this.hasResults = false;
                        this.views.results = [];
                        this.views.didYouMean = []
                        this.loading = false;
                        return;
                    }

                    this.startAiTimer();

                    let searchAfter = params && params.hasOwnProperty('searchAfter') && params.searchAfter ? ('&search_after=' + params.searchAfter) : ''
                    this.$http.post('/elastic/search/results?query=' + this.keywords + searchAfter, {
                            categories: this.categories,
                            module: "<?= $this->id ?>",
                            root: "<?= $this->rootPageId ?>",
                            group: true,
                            source: window.location.href
                        },
                        {
                            emulateJSON: true,
                            'Content-Type': 'application/x-www-form-urlencoded',
                            before: function (request) {
                                if (this.previousRequest) {
                                    this.previousRequest.abort();
                                }
                                this.previousRequest = request;
                            }
                        }
                    ).then(function (res) {

                        let results = res.body.results['hits'] ? res.body.results['hits'] : [];
                        let arrResults = this.groupResults(results);

                        if (params && params.hasOwnProperty('merge') && params.merge) {
                            let hasMatches = false;
                            for (let i = 0; i < arrResults.length; i++) {
                                if (this.add2ResultsByCategory(arrResults[i]['value'], arrResults[i])) {
                                    hasMatches = true;
                                }
                            }

                            if (!hasMatches) {
                                this.loadMoreButton = false;
                            }

                        } else {
                            this.views.results = arrResults;
                            this.views.didYouMean = res.body.results['didYouMean'];
                        }

                        for (let i = 0; i < arrResults.length; i++) {
                            for (let j = 0; j < arrResults[i]['hits'].length; j++) {
                                this.urls.push(arrResults[i]['hits'][j]['url']);
                            }
                        }

                        if (this.views.results.length) {
                            this.hasResults = true;
                        } else {
                            this.categories = [];
                        }

                        this.countResults();
                        this.views.globalRichSnippets = res.body.globalRichSnippets;
                        this.maxScore = res.body.results['max_score'];
                        this.setFaqRichSnippets();
                        this.loading = false;
                        this.resultsOnly = false;
                        this.stopAiTimer();
                        this.clickOutside();

                    }.bind(this));
                },
                startAiTimer: function () {
                    if (!this.openAi) {
                        return;
                    }
                    this.timer = setInterval(function () {
                        this.time += 1;
                        if (this.time > 6 && !this.showOpenAiText) {
                            this.showOpenAiText = true;
                        }
                    }.bind(this), 1000);
                },
                stopAiTimer: function () {
                    clearInterval(this.timer);
                    this.showOpenAiText = false;
                    this.timer = null;
                    this.time = 0;
                },
                add2ResultsByCategory: function (category, results) {
                    let added = false;
                    let exist = false;
                    for (let i = 0; i < this.views.results.length; i++) {
                        if (this.views.results[i]['value'] === category) {
                            for (let j = 0; j < results['hits'].length; j++) {
                                if (!this.urls.includes(results['hits'][j]['url'])) {
                                    this.views.results[i]['hits'].push(results['hits'][j]);
                                    added = true;
                                }
                            }
                            exist = true;
                        }
                    }
                    if (!exist) {
                        this.views.results.push(results)
                    }
                    return added;
                },
                loadMoreResults: function () {
                    this.fetch({
                        'searchAfter': this.lastSort,
                        'merge': true
                    })
                },
                setDidYouMeanToKeyword: function () {
                    this.keywords = this.views.didYouMean[0];
                    this.views.didYouMean = [];
                    this.fetch({})
                },
                setFaqRichSnippets: function () {
                    this.richSnippets['faq'] = {};
                    if (Object.keys(this.views.globalRichSnippets).length && this.views.globalRichSnippets.hasOwnProperty('FAQPage')) {
                        for (let i = 0; i < this.views.globalRichSnippets['FAQPage'].length; i++) {
                            let faqPages = this.views.globalRichSnippets['FAQPage'][i];
                            for (let j = 0; j < faqPages['mainEntity'].length; j++) {
                                let page = faqPages['mainEntity'][j];
                                if (page['name'] && page['acceptedAnswer'] && page['acceptedAnswer']['text'] && page['_matched']) {
                                    this.richSnippets['faq'][page.name] = {
                                        question: page['name'],
                                        answer: page['acceptedAnswer']['text'],
                                        active: false
                                    }
                                }
                            }
                        }
                    }
                },
                toggleFaqSnippet: function (name) {
                    this.richSnippets['faq'][name]['active'] = !this.richSnippets['faq'][name]['active'];
                    this.$forceUpdate();
                },
                groupResults: function (hits) {

                    let group = {};
                    let onlyCategories = <?= \json_encode((empty($this->categories) ? [] : $this->categories)) ?>;

                    for (let type in hits) {
                        if (hits.hasOwnProperty(type)) {
                            let val = hits[type]['value'];
                            if ((this.categories.length && this.categories.indexOf(val) === -1) || (onlyCategories.length && onlyCategories.indexOf(val) === -1)) {
                                continue;
                            }
                            group[type] = hits[type];
                            this.lastSort = hits[type]['hits'].length ? hits[type]['hits'][hits[type]['hits'].length - 1]['sort'].join() : '';
                        }
                    }

                    let _sortedGroup = [];
                    if (onlyCategories.length) {
                        for (let i = 0; i < onlyCategories.length; i++) {
                            for (let groupLabel in group) {
                                if (group[groupLabel]['value'] === onlyCategories[i]) {
                                    _sortedGroup.push(group[groupLabel]);
                                }
                            }
                        }
                        return _sortedGroup;
                    } else {
                        _sortedGroup = this.sortObject(group);
                    }

                    return _sortedGroup;
                },
                countResults: function () {

                    let categories = [];

                    for (let i = 0; i < this.views.results.length; i++) {

                        let count = 0;
                        let val = this.views.results[i]['value'];
                        let category = this.options.categories[val];

                        count = Array.isArray(this.views.results[i]['hits']) ? this.views.results[i]['hits'].length : 0;
                        category['count'] = Array.isArray(this.views.results[i]['hits']) ? this.views.results[i]['hits'].length : 0;

                        if (typeof categories[i] === 'undefined') {
                            categories[i] = this.options.categories[val];
                        }
                    }

                    if (!this.resultsOnly) {
                        this.views.categories = categories;
                    }
                },
                sortObject: function (obj) {
                    let arrReturn = [];
                    Object.keys(obj).sort(function (a, b) {return a.toLowerCase().localeCompare(b.toLowerCase())}).forEach(function (v) {
                        arrReturn.push(obj[v]);
                    });
                    return arrReturn;
                },
                startsWithUppercase: function (str) {
                    return str.substr(0, 1).match(/[A-Z\u00C0-\u00DC]/);
                },
                setCategory: function (category) {
                    this.resultsOnly = true;
                    let index = this.categories.indexOf(category);
                    if (index === -1) {
                        this.categories.push(category);
                    } else {
                        this.categories.splice(index, 1);
                    }
                    this.fetch({});
                },
                activeCategory: function (category) {
                    let index = this.categories.indexOf(category);
                    return index !== -1;
                },
                search: function () {
                    this.loadMoreButton = true;
                    clearTimeout(this.timeout);
                    this.timeout = setTimeout(function () {
                        this.fetch({});
                    }.bind(this), 600);
                },
                submit: function () {
                    let match = this.autoCompleteJS.feedback && this.autoCompleteJS.feedback.hasOwnProperty('cursor') ? this.autoCompleteJS.feedback.matches[this.autoCompleteJS.feedback.cursor] : '';
                    if (match) {
                        this.keywords = match.value;
                        this.fetch({})
                    } else {
                        this.keywords = '';
                        this.fetch({})
                    }
                },
                sendStat: function (e) {
                    let href = e.currentTarget.querySelector('a').href;
                    if (!href) {
                        return;
                    }
                    this.$http.post('/stat/click?query=' + this.keywords, {
                            url: href,
                            categories: this.categories
                        },
                        {
                            emulateJSON: true,
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    ).then(function (res) {
                        //
                    });
                },
                clickOutside: function () {
                    window.addEventListener('click', function () {
                        this.close();
                    }.bind(this));
                    this.$refs['elasticsearchContainerInside'].addEventListener('click', function (e) {
                        e.stopPropagation();
                    });
                },
                close: function () {
                    this.hasResults = false;
                    this.keywords = "";
                    this.categories = []
                },
                setAutoComplete: function () {
                    let self = this;
                    this.autoCompleteJS = new autoComplete({
                        selector: "#ctrl_keywords_<?= $this->uniqueId ?>",
                        placeHolder: "<?= $this->keywordLabel ?>",
                        threshold: 2,
                        debounce: 600,
                        submit: true,
                        data: {
                            src: async function (query) {
                                let headers = new Headers();
                                headers.append('Accept', 'application/json');
                                headers.append('Content-Type', 'application/json');
                                const source = await fetch('/elastic/search/autocompletion?query=' + query, {
                                    method: "POST",
                                    headers: headers,
                                    cache: "no-cache",
                                    redirect: "follow",
                                    credentials: "same-origin",
                                    referrerPolicy: "no-referrer",
                                    body: JSON.stringify({
                                        categories: self.categories,
                                        module: "<?= $this->id ?>",
                                        root: "<?= $this->rootPageId ?>"
                                    })
                                });
                                let results = [];
                                let data = await source.json();
                                for (let i = 0; i < data.results['hits'].length; i++) {
                                    results.push(data.results['hits'][i]['term']);
                                }
                                return results;
                            }
                        },
                        resultsList: {
                            maxResults: 50,
                            tabSelect: true
                        },
                        resultItem: {
                            highlight: true
                        },
                        events: {
                            input: {
                                selection: (event) => {
                                    self.keywords = event.detail.selection.value;
                                    self.fetch({});
                                },
                                keydown(event) {
                                    switch (event.keyCode) {
                                        case 40:
                                        case 38:
                                            event.preventDefault();
                                            event.keyCode === 40 ? objState.autoCompleteJS.next() : objState.autoCompleteJS.previous();
                                            break;
                                        case 9:
                                            event.preventDefault();
                                            if (objState.autoCompleteJS.resultsList.tabSelect) {
                                                objState.autoCompleteJS.next()
                                            }
                                            break;
                                        case 27:
                                            objState.autoCompleteJS.input.value = "";
                                            objState.autoCompleteJS.close();
                                            break;
                                        case 13:
                                            event.preventDefault()
                                            self.submit();
                                            objState.autoCompleteJS.close();
                                            break;
                                    }
                                }
                            }
                        }
                    });
                }
            },
            watch: {
                'hasResults': {
                    handler: function (val) {
                        let objBody = document.querySelector('body');
                        if (val) {
                            objBody.classList.add('search-panel-open');
                        } else {
                            objBody.classList.remove('search-panel-open');
                        }
                    }
                }
            },
            mounted: function () {
                if (this.keywords) {
                    this.fetch({});
                }
            }
        });
        window.elasticInstaces.push(elasticComponent);
    })();
</script>