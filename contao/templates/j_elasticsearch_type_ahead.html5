<script>
    (function () {
        let objState = {
            categories: <?= json_encode((empty($this->categories)?[]:$this->categories)) ?>,
            keywords: '<?= $this->keyword ?>',
            didYouMean: [],
            results: [],
            lastSort: '',
            urls: [],
            loading: false,
            submitted: false,
            autoCompleteJS: null,
            loadMoreButton: true
        };
        new Vue({
            el: "#<?= $this->elementId ?>",
            data: function () {
                return objState
            },
            methods: {
                setAutoComplete: function () {
                    if (this.autoCompleteJS) {
                        return;
                    }
                    let self = this;
                    let type = '<?php if ($this->psAutoCompletionType == 'advanced'): ?>results<?php else: ?>autocompletion<?php endif; ?>';
                    let fetchUrl = '/elastic/search/'+ type +'?query=';
                    this.autoCompleteJS = new autoComplete({
                        selector: "#ctrl_keywords_<?= $this->uniqueId ?>",
                        placeHolder: "<?= $this->keywordLabel ?>",
                        threshold: <?= $this->minKeywordLength ?>,
                        debounce: 800,
                        submit: true,
                        data: {
                            src: async function(query) {
                                self.didYouMean = [];
                                try {
                                    self.loading = true;
                                    let headers = new Headers();
                                    headers.append('Accept', 'application/json');
                                    headers.append('Content-Type', 'application/json');
                                    const source = await fetch(fetchUrl+query, {
                                        method: "POST",
                                        mode: "cors",
                                        headers: headers,
                                        cache: "no-cache",
                                        redirect: "follow",
                                        credentials: "same-origin",
                                        referrerPolicy: "same-origin",
                                        body: JSON.stringify({
                                            categories: self.categories,
                                            module: "<?= $this->id ?>",
                                            root: "<?= $this->rootPageId ?>"
                                        })
                                    });
                                    const data = await source.json();
                                    let suggests = [];
                                    for (let i=0;i<data['results']['hits'].length;i++) {
                                        let suggest = data['results']['hits'][i];
                                        suggests.push(suggest.template);
                                    }
                                    self.loading = false;
                                    self.didYouMean = data['results']['didYouMean'];
                                    return suggests;
                                } catch (error) {
                                    self.loading = false;
                                    return error;
                                }
                            }
                        },
                        searchEngine: function (query, record) {
                            return record;
                        },
                        resultsList: {
                            maxResults: 30,
                            tabSelect: true,
                            noResults: false
                        },
                        resultItem: {
                            highlight: false
                        },
                        events: {
                            input: {
                                <?php if ($this->psAutoCompletionType == 'simple'): ?>
                                selection: (event) => {
                                    objState.autoCompleteJS.input.value = event.detail.selection.value;
                                    let results = document.querySelector('#<?= $this->elementId ?>');
                                    let form = results.querySelector('form');
                                    form.submit();
                                },
                                <?php endif; ?>
                                keydown(event) {
                                    switch (event.keyCode) {
                                        case 40:
                                        case 38:
                                            event.preventDefault();
                                            event.keyCode === 40 ? objState.autoCompleteJS.next() : objState.autoCompleteJS.previous();
                                            break;
                                        case 9:
                                            event.preventDefault();
                                            if (objState.autoCompleteJS.resultsList.tabSelect) {
                                                objState.autoCompleteJS.next()
                                            }
                                            break;
                                        case 27:
                                            objState.autoCompleteJS.input.value = "";
                                            objState.autoCompleteJS.close();
                                            break;
                                        case 13:
                                            event.preventDefault()
                                            self.submit();
                                            objState.autoCompleteJS.close();
                                            break;
                                    }
                                }
                            }
                        }
                    });
                },
                submitSearch: function (event) {
                    <?php if (!$this->redirect): ?>
                    event.preventDefault();
                    this.autoCompleteJS.start(this.keywords);
                    <?php endif; ?>
                },
                getSearchResults: function (params) {
                    this.submitted = true;
                    <?php if (!$this->isResultPage && $this->redirect): ?>
                    window.location.href = "<?= $this->redirect ?>?keywords=" + this.keywords;
                    return;
                    <?php endif; ?>
                    this.didYouMean = [];
                    this.loading = true;
                    let searchAfter = params && params.hasOwnProperty('searchAfter') && params.searchAfter ? ('&search_after=' + params.searchAfter) : ''
                    let fetchUrl = '/elastic/search/results?query=' + this.keywords + searchAfter;
                    this.$http.post(fetchUrl, {
                            categories: this.categories,
                            module:"<?= $this->id ?>",
                            root: "<?= $this->rootPageId ?>",
                            source: window.location.href
                        },
                        {
                            emulateJSON: true,
                            'Content-Type': 'application/x-www-form-urlencoded',
                            before: function (request) {
                                if (this.previousRequest) {
                                    this.previousRequest.abort();
                                }
                                this.previousRequest = request;
                            }
                        }
                    ).then(function (res) {

                        this.loading = false;
                        let results = res.body.results['hits'] ? res.body.results['hits'] : [];

                        if (params && params.hasOwnProperty('merge') && params.merge) {
                            for (let i=0;i<results.length;i++) {
                                if (!this.urls.includes(results[i]['url'])) {
                                    this.results.push(results[i]);
                                } else {
                                    results.splice(i, 1);
                                }
                            }

                        } else {
                            this.results = [];
                            for (let i=0;i<results.length;i++) {
                                this.results.push(results[i]);
                                this.urls.push(results[i]['url']);
                            }
                            this.didYouMean = res.body['results']['didYouMean'];
                        }

                        if (!results.length) {
                            this.loadMoreButton = false;
                        } else {
                            this.lastSort = results[results.length-1]['sort'].join()
                        }

                    }.bind(this));
                },
                setDidYouMeanToKeyword: function () {
                    this.keywords = this.didYouMean[0];
                    this.didYouMean = [];
                    this.autoCompleteJS.start(this.keywords);
                },
                sendHrefStat: function (href) {
                    this.$http.post('/stat/click?query=' + this.keywords, {
                            url: href,
                            categories: this.categories
                        },
                        {
                            emulateJSON: true,
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    ).then(function (res) {
                        //
                    });
                },
                sendStat: function (e) {
                    let href = e.currentTarget.querySelector('a').href;
                    if (!href) {
                        return;
                    }
                    this.sendHrefStat(href);
                },
                loadMoreResults: function () {
                    this.getSearchResults({
                        'searchAfter': this.lastSort,
                        'merge': true
                    })
                },
                submit: function () {
                    let match = this.autoCompleteJS.feedback && this.autoCompleteJS.feedback.hasOwnProperty('cursor') ? this.autoCompleteJS.feedback.matches[this.autoCompleteJS.feedback.cursor] : '';
                    this.keywords = this.autoCompleteJS.input ? this.autoCompleteJS.input.value : this.keywords;
                    if (match) {
                        const link = document.createElement("div");
                        link.innerHTML = match.value;
                        let a = link.querySelector('a');
                        if (a) {
                            this.sendHrefStat(a.href);
                            window.location.href = a.href;
                            return;
                        }
                        this.getSearchResults({})
                    } else {
                        this.getSearchResults({})
                    }
                }
            },
            mounted: function () {
                this.setAutoComplete();
                <?php if ($this->keyword): ?>
                this.getSearchResults({});
                <?php endif; ?>
            }
        })
    })();
</script>